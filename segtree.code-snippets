{
	"": {
		"prefix": "segtree",
		"body": [
		  "struct segtree ",
		  "{",
		  "    //initialise the tree",
		  "    //do updates for each array element",
		  "    //get your queries",
		  "    //have a look at what you assign in init,ex: 0 for sums and 1e9 for min ",
		  "    int size;",
		  "    vector <long long> tree;",
		  "",
		  "    void init(int n)",
		  "    {",
		  "        size=1;",
		  "        while (size<n)",
		  "        {",
		  "            size*=2;",
		  "        }",
		  "        tree.assign(2*size,0);//**",
		  "    }",
		  "    //we are going from lx to rx both included",
		  "    void point_update(int i,int val,int x,int lx,int rx)",
		  "    {",
		  "        if (rx==lx)",
		  "        {",
		  "            tree[x] = val;",
		  "            return;",
		  "        }",
		  "        int mid=(lx+rx)/2;",
		  "",
		  "        if (i<=mid)",
		  "            point_update(i,val,2*x+1,lx,mid);",
		  "        else",
		  "            point_update(i,val,2*x+2,mid+1,rx);",
		  "",
		  "        tree[x]=tree[2*x+1]+tree[2*x+2];//**",
		  "    }",
		  "    void point_update(int i,int val)",
		  "    {",
		  "        point_update(i,val,0,0,size-1);",
		  "    }",
		  "",
		  "    long long query(int l,int r,int x,int lx,int rx)",
		  "    {",
		  "        if (lx>r||l> rx) return 0;//**",
		  "        if (lx>=l&&rx<=r) return tree[x];",
		  "        int mid=(lx+rx)/2;",
		  "        long long s1=query(l,r,2*x+1,lx,mid);",
		  "        long long s2=query(l,r,2*x+2,mid+1,rx);",
		  "        return s1+s2;//**",
		  "    }",
		  "    long long query(int l,int r)",
		  "    {",
		  "        return query(l,r,0,0,size-1);",
		  "    }",
		  "    //find kth 1, 1 numbering starts from 1",
		  "    long long kth_one(int k,int x,int lx,int rx)",
		  "    {",
		  "        if (lx==rx)",
		  "        {",
		  "            return lx;",
		  "        }",
		  "        int mid=(lx+rx)/2;",
		  "        if (tree[2*x+1]>=k)",
		  "        {",
		  "            return kth_one(k,2*x+1,lx,mid);",
		  "        }   ",
		  "        else",
		  "        {",
		  "            return kth_one(k-tree[2*x+1],2*x+2,mid+1,rx);",
		  "        }",
		  "    }",
		  "};"
		],
		"description": ""
	  }
}